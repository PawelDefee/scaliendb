/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL },
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_scaliendb_client(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_scaliendb_client(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_scaliendb_client(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include <inttypes.h>


#include <stdint.h>		// Use the C99 official header


/* Includes the header in the wrapper code */
#define SWIG_FILE_WITH_INIT
#include "../SDBPClientWrapper.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_imaxdiv_t_quot_set(void * jarg1, long long jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  arg1 = (imaxdiv_t *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->quot = arg2;
  
}


SWIGEXPORT long long SWIGSTDCALL CSharp_imaxdiv_t_quot_get(void * jarg1) {
  long long jresult ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  arg1 = (imaxdiv_t *)jarg1; 
  result = (long long) ((arg1)->quot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_imaxdiv_t_rem_set(void * jarg1, long long jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  arg1 = (imaxdiv_t *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->rem = arg2;
  
}


SWIGEXPORT long long SWIGSTDCALL CSharp_imaxdiv_t_rem_get(void * jarg1) {
  long long jresult ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  arg1 = (imaxdiv_t *)jarg1; 
  result = (long long) ((arg1)->rem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_imaxdiv_t() {
  void * jresult ;
  imaxdiv_t *result = 0 ;
  
  result = (imaxdiv_t *)new imaxdiv_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_imaxdiv_t(void * jarg1) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  
  arg1 = (imaxdiv_t *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT long long SWIGSTDCALL CSharp_imaxabs(long long jarg1) {
  long long jresult ;
  intmax_t arg1 ;
  intmax_t result;
  
  arg1 = (intmax_t)jarg1; 
  result = (intmax_t)imaxabs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_imaxdiv(long long jarg1, long long jarg2) {
  void * jresult ;
  intmax_t arg1 ;
  intmax_t arg2 ;
  imaxdiv_t result;
  
  arg1 = (intmax_t)jarg1; 
  arg2 = (intmax_t)jarg2; 
  result = imaxdiv(arg1,arg2);
  jresult = new imaxdiv_t((imaxdiv_t &)result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_strtoimax(char * jarg1, void * jarg2, int jarg3) {
  long long jresult ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  intmax_t result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  result = (intmax_t)strtoimax((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_strtoumax(char * jarg1, void * jarg2, int jarg3) {
  unsigned long long jresult ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  uintmax_t result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int)jarg3; 
  result = (uintmax_t)strtoumax((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SDBP_NodeParams(int jarg1) {
  void * jresult ;
  int arg1 ;
  SDBP_NodeParams *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (SDBP_NodeParams *)new SDBP_NodeParams(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SDBP_NodeParams(void * jarg1) {
  SDBP_NodeParams *arg1 = (SDBP_NodeParams *) 0 ;
  
  arg1 = (SDBP_NodeParams *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_NodeParams_Close(void * jarg1) {
  SDBP_NodeParams *arg1 = (SDBP_NodeParams *) 0 ;
  
  arg1 = (SDBP_NodeParams *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_NodeParams_AddNode(void * jarg1, char * jarg2) {
  SDBP_NodeParams *arg1 = (SDBP_NodeParams *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SDBP_NodeParams *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->AddNode((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_NodeParams_nodec_set(void * jarg1, int jarg2) {
  SDBP_NodeParams *arg1 = (SDBP_NodeParams *) 0 ;
  int arg2 ;
  
  arg1 = (SDBP_NodeParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nodec = arg2;
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_NodeParams_nodec_get(void * jarg1) {
  int jresult ;
  SDBP_NodeParams *arg1 = (SDBP_NodeParams *) 0 ;
  int result;
  
  arg1 = (SDBP_NodeParams *)jarg1; 
  result = (int) ((arg1)->nodec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_NodeParams_nodes_set(void * jarg1, void * jarg2) {
  SDBP_NodeParams *arg1 = (SDBP_NodeParams *) 0 ;
  char **arg2 = (char **) 0 ;
  
  arg1 = (SDBP_NodeParams *)jarg1; 
  arg2 = (char **)jarg2; 
  if (arg1) (arg1)->nodes = arg2;
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDBP_NodeParams_nodes_get(void * jarg1) {
  void * jresult ;
  SDBP_NodeParams *arg1 = (SDBP_NodeParams *) 0 ;
  char **result = 0 ;
  
  arg1 = (SDBP_NodeParams *)jarg1; 
  result = (char **) ((arg1)->nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_NodeParams_num_set(void * jarg1, int jarg2) {
  SDBP_NodeParams *arg1 = (SDBP_NodeParams *) 0 ;
  int arg2 ;
  
  arg1 = (SDBP_NodeParams *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num = arg2;
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_NodeParams_num_get(void * jarg1) {
  int jresult ;
  SDBP_NodeParams *arg1 = (SDBP_NodeParams *) 0 ;
  int result;
  
  arg1 = (SDBP_NodeParams *)jarg1; 
  result = (int) ((arg1)->num);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SDBP_Buffer() {
  void * jresult ;
  SDBP_Buffer *result = 0 ;
  
  result = (SDBP_Buffer *)new SDBP_Buffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_Buffer_SetBuffer(void * jarg1, char * jarg2, int jarg3) {
  SDBP_Buffer *arg1 = (SDBP_Buffer *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (SDBP_Buffer *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBuffer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_Buffer_data_set(void * jarg1, int jarg2) {
  SDBP_Buffer *arg1 = (SDBP_Buffer *) 0 ;
  intptr_t arg2 ;
  
  arg1 = (SDBP_Buffer *)jarg1; 
  arg2 = (intptr_t)jarg2; 
  if (arg1) (arg1)->data = arg2;
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Buffer_data_get(void * jarg1) {
  int jresult ;
  SDBP_Buffer *arg1 = (SDBP_Buffer *) 0 ;
  intptr_t result;
  
  arg1 = (SDBP_Buffer *)jarg1; 
  result = (intptr_t) ((arg1)->data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_Buffer_len_set(void * jarg1, int jarg2) {
  SDBP_Buffer *arg1 = (SDBP_Buffer *) 0 ;
  int arg2 ;
  
  arg1 = (SDBP_Buffer *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->len = arg2;
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Buffer_len_get(void * jarg1) {
  int jresult ;
  SDBP_Buffer *arg1 = (SDBP_Buffer *) 0 ;
  int result;
  
  arg1 = (SDBP_Buffer *)jarg1; 
  result = (int) ((arg1)->len);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SDBP_Buffer(void * jarg1) {
  SDBP_Buffer *arg1 = (SDBP_Buffer *) 0 ;
  
  arg1 = (SDBP_Buffer *)jarg1; 
  delete arg1;
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_ResultClose(void * jarg1) {
  ResultObj arg1 = (ResultObj) 0 ;
  
  arg1 = (ResultObj)jarg1; 
  SDBP_ResultClose(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SDBP_ResultKey(void * jarg1) {
  char * jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  std::string result;
  
  arg1 = (ResultObj)jarg1; 
  result = SDBP_ResultKey(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SDBP_ResultValue(void * jarg1) {
  char * jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  std::string result;
  
  arg1 = (ResultObj)jarg1; 
  result = SDBP_ResultValue(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDBP_ResultKeyBuffer(void * jarg1) {
  void * jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  SDBP_Buffer result;
  
  arg1 = (ResultObj)jarg1; 
  result = SDBP_ResultKeyBuffer(arg1);
  jresult = new SDBP_Buffer((SDBP_Buffer &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDBP_ResultValueBuffer(void * jarg1) {
  void * jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  SDBP_Buffer result;
  
  arg1 = (ResultObj)jarg1; 
  result = SDBP_ResultValueBuffer(arg1);
  jresult = new SDBP_Buffer((SDBP_Buffer &)result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SDBP_ResultSignedNumber(void * jarg1) {
  long long jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  int64_t result;
  
  arg1 = (ResultObj)jarg1; 
  result = (int64_t)SDBP_ResultSignedNumber(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SDBP_ResultNumber(void * jarg1) {
  unsigned long long jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  uint64_t result;
  
  arg1 = (ResultObj)jarg1; 
  result = (uint64_t)SDBP_ResultNumber(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDBP_ResultIsConditionalSuccess(void * jarg1) {
  unsigned int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  bool result;
  
  arg1 = (ResultObj)jarg1; 
  result = (bool)SDBP_ResultIsConditionalSuccess(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SDBP_ResultDatabaseID(void * jarg1) {
  unsigned long long jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  uint64_t result;
  
  arg1 = (ResultObj)jarg1; 
  result = (uint64_t)SDBP_ResultDatabaseID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SDBP_ResultTableID(void * jarg1) {
  unsigned long long jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  uint64_t result;
  
  arg1 = (ResultObj)jarg1; 
  result = (uint64_t)SDBP_ResultTableID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_ResultBegin(void * jarg1) {
  ResultObj arg1 = (ResultObj) 0 ;
  
  arg1 = (ResultObj)jarg1; 
  SDBP_ResultBegin(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_ResultNext(void * jarg1) {
  ResultObj arg1 = (ResultObj) 0 ;
  
  arg1 = (ResultObj)jarg1; 
  SDBP_ResultNext(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDBP_ResultIsEnd(void * jarg1) {
  unsigned int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  bool result;
  
  arg1 = (ResultObj)jarg1; 
  result = (bool)SDBP_ResultIsEnd(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDBP_ResultIsFinished(void * jarg1) {
  unsigned int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  bool result;
  
  arg1 = (ResultObj)jarg1; 
  result = (bool)SDBP_ResultIsFinished(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_ResultTransportStatus(void * jarg1) {
  int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  int result;
  
  arg1 = (ResultObj)jarg1; 
  result = (int)SDBP_ResultTransportStatus(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_ResultCommandStatus(void * jarg1) {
  int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  int result;
  
  arg1 = (ResultObj)jarg1; 
  result = (int)SDBP_ResultCommandStatus(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDBP_ResultNumNodes(void * jarg1) {
  unsigned int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  unsigned int result;
  
  arg1 = (ResultObj)jarg1; 
  result = (unsigned int)SDBP_ResultNumNodes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SDBP_ResultNodeID(void * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  unsigned int arg2 ;
  uint64_t result;
  
  arg1 = (ResultObj)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (uint64_t)SDBP_ResultNodeID(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDBP_ResultElapsedTime(void * jarg1) {
  unsigned int jresult ;
  ResultObj arg1 = (ResultObj) 0 ;
  unsigned int result;
  
  arg1 = (ResultObj)jarg1; 
  result = (unsigned int)SDBP_ResultElapsedTime(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDBP_Create() {
  void * jresult ;
  ClientObj result;
  
  result = (ClientObj)SDBP_Create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Init(void * jarg1, void * jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  SDBP_NodeParams *arg2 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (SDBP_NodeParams *)jarg2;
  if(!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SDBP_NodeParams const & type is null", 0);
    return 0;
  } 
  result = (int)SDBP_Init(arg1,(SDBP_NodeParams const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_Destroy(void * jarg1) {
  ClientObj arg1 = (ClientObj) 0 ;
  
  arg1 = (ClientObj)jarg1; 
  SDBP_Destroy(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDBP_GetResult(void * jarg1) {
  void * jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  ResultObj result;
  
  arg1 = (ClientObj)jarg1; 
  result = (ResultObj)SDBP_GetResult(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_SetGlobalTimeout(void * jarg1, unsigned long long jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  SDBP_SetGlobalTimeout(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_SetMasterTimeout(void * jarg1, unsigned long long jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  SDBP_SetMasterTimeout(arg1,arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SDBP_GetGlobalTimeout(void * jarg1) {
  unsigned long long jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t result;
  
  arg1 = (ClientObj)jarg1; 
  result = (uint64_t)SDBP_GetGlobalTimeout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SDBP_GetMasterTimeout(void * jarg1) {
  unsigned long long jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t result;
  
  arg1 = (ClientObj)jarg1; 
  result = (uint64_t)SDBP_GetMasterTimeout(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SDBP_GetJSONConfigState(void * jarg1) {
  char * jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string result;
  
  arg1 = (ClientObj)jarg1; 
  result = SDBP_GetJSONConfigState(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_WaitConfigState(void * jarg1) {
  ClientObj arg1 = (ClientObj) 0 ;
  
  arg1 = (ClientObj)jarg1; 
  SDBP_WaitConfigState(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_SetConsistencyMode(void * jarg1, int jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  int arg2 ;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (int)jarg2; 
  SDBP_SetConsistencyMode(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_SetBatchMode(void * jarg1, int jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  int arg2 ;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (int)jarg2; 
  SDBP_SetBatchMode(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_SetBatchLimit(void * jarg1, unsigned int jarg2) {
  ClientObj arg1 = (ClientObj) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (unsigned int)jarg2; 
  SDBP_SetBatchLimit(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_CreateDatabase(void * jarg1, char * jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)SDBP_CreateDatabase(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_RenameDatabase(void * jarg1, unsigned long long jarg2, char * jarg3) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)SDBP_RenameDatabase(arg1,arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_DeleteDatabase(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (int)SDBP_DeleteDatabase(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_CreateTable(void * jarg1, unsigned long long jarg2, unsigned long long jarg3, char * jarg4) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  uint64_t arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)SDBP_CreateTable(arg1,arg2,arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_RenameTable(void * jarg1, unsigned long long jarg2, char * jarg3) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)SDBP_RenameTable(arg1,arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_DeleteTable(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (int)SDBP_DeleteTable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_TruncateTable(void * jarg1, unsigned long long jarg2) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (int)SDBP_TruncateTable(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDBP_GetNumQuorums(void * jarg1) {
  unsigned int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  unsigned int result;
  
  arg1 = (ClientObj)jarg1; 
  result = (unsigned int)SDBP_GetNumQuorums(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SDBP_GetQuorumIDAt(void * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  unsigned int arg2 ;
  uint64_t result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (uint64_t)SDBP_GetQuorumIDAt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SDBP_GetQuorumNameAt(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  unsigned int arg2 ;
  std::string result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = SDBP_GetQuorumNameAt(arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDBP_GetNumDatabases(void * jarg1) {
  unsigned int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  unsigned int result;
  
  arg1 = (ClientObj)jarg1; 
  result = (unsigned int)SDBP_GetNumDatabases(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SDBP_GetDatabaseIDAt(void * jarg1, unsigned int jarg2) {
  unsigned long long jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  unsigned int arg2 ;
  uint64_t result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (uint64_t)SDBP_GetDatabaseIDAt(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SDBP_GetDatabaseNameAt(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  unsigned int arg2 ;
  std::string result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = SDBP_GetDatabaseNameAt(arg1,arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDBP_GetNumTables(void * jarg1, unsigned long long jarg2) {
  unsigned int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  unsigned int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (unsigned int)SDBP_GetNumTables(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_SDBP_GetTableIDAt(void * jarg1, unsigned long long jarg2, unsigned int jarg3) {
  unsigned long long jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  unsigned int arg3 ;
  uint64_t result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (uint64_t)SDBP_GetTableIDAt(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SDBP_GetTableNameAt(void * jarg1, unsigned long long jarg2, unsigned int jarg3) {
  char * jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  unsigned int arg3 ;
  std::string result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = SDBP_GetTableNameAt(arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Get(void * jarg1, unsigned long long jarg2, char * jarg3) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)SDBP_Get(arg1,arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_GetCStr(void * jarg1, unsigned long long jarg2, char * jarg3, int jarg4) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)SDBP_GetCStr(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Set(void * jarg1, unsigned long long jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int)SDBP_Set(arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_SetCStr(void * jarg1, unsigned long long jarg2, char * jarg3, int jarg4, char * jarg5, int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (int)jarg6; 
  result = (int)SDBP_SetCStr(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Add(void * jarg1, unsigned long long jarg2, char * jarg3, long long jarg4) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  std::string *arg3 = 0 ;
  int64_t arg4 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int64_t)jarg4; 
  result = (int)SDBP_Add(arg1,arg2,(std::string const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_AddCStr(void * jarg1, unsigned long long jarg2, char * jarg3, int jarg4, long long jarg5) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int64_t arg5 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int64_t)jarg5; 
  result = (int)SDBP_AddCStr(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Delete(void * jarg1, unsigned long long jarg2, char * jarg3) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  std::string *arg3 = 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int)SDBP_Delete(arg1,arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_DeleteCStr(void * jarg1, unsigned long long jarg2, char * jarg3, int jarg4) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)SDBP_DeleteCStr(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_ListKeys(void * jarg1, unsigned long long jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  unsigned int arg6 ;
  bool arg7 ;
  bool arg8 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (unsigned int)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = (int)SDBP_ListKeys(arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_ListKeysCStr(void * jarg1, unsigned long long jarg2, char * jarg3, int jarg4, char * jarg5, int jarg6, char * jarg7, int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  unsigned int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  result = (int)SDBP_ListKeysCStr(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_ListKeyValues(void * jarg1, unsigned long long jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  unsigned int arg6 ;
  bool arg7 ;
  bool arg8 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (unsigned int)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = (int)SDBP_ListKeyValues(arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_ListKeyValuesCStr(void * jarg1, unsigned long long jarg2, char * jarg3, int jarg4, char * jarg5, int jarg6, char * jarg7, int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  unsigned int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  result = (int)SDBP_ListKeyValuesCStr(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Count(void * jarg1, unsigned long long jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned int jarg6) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = jarg6 ? true : false; 
  result = (int)SDBP_Count(arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_CountCStr(void * jarg1, unsigned long long jarg2, char * jarg3, int jarg4, char * jarg5, int jarg6, char * jarg7, int jarg8, unsigned int jarg9) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  uint64_t arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  bool arg9 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (int)SDBP_CountCStr(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Begin(void * jarg1) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  result = (int)SDBP_Begin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Submit(void * jarg1) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  result = (int)SDBP_Submit(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDBP_Cancel(void * jarg1) {
  int jresult ;
  ClientObj arg1 = (ClientObj) 0 ;
  int result;
  
  arg1 = (ClientObj)jarg1; 
  result = (int)SDBP_Cancel(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_SetTrace(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  SDBP_SetTrace(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_SetLogFile(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  SDBP_SetLogFile((std::string const &)*arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SDBP_GetVersion() {
  char * jresult ;
  std::string result;
  
  result = SDBP_GetVersion();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SDBP_GetDebugString() {
  char * jresult ;
  std::string result;
  
  result = SDBP_GetDebugString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDBP_LogTrace(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  SDBP_LogTrace((std::string const &)*arg1);
}


#ifdef __cplusplus
}
#endif

